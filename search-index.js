var searchIndex = {};
searchIndex["splay"] = {"doc":"Contains an implementation of splay trees where each node has a key/value\npair to be used in maps and sets. The only requirement is that the key must\nimplement the Ord trait.","items":[[0,"set","splay","",null,null],[3,"SplaySet","splay::set","",null,null],[3,"IntoIter","","",null,null],[11,"clone","","",0,null],[11,"new","","Creates a new empty set",0,{"inputs":[],"output":{"name":"splayset"}}],[11,"into_iter","","Moves all values out of this set, transferring ownership to the given\niterator.",0,null],[11,"len","","",0,null],[11,"is_empty","","",0,null],[11,"clear","","",0,null],[11,"contains","","Return true if the set contains a value",0,null],[11,"insert","","Add a value to the set. Return true if the value was not already\npresent in the set.",0,null],[11,"remove","","Remove a value from the set. Return true if the value was\npresent in the set.",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next_back","","",1,null],[11,"default","","",0,{"inputs":[],"output":{"name":"splayset"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"splayset"}}],[11,"extend","","",0,null],[0,"map","splay","",null,null],[3,"SplayMap","splay::map","The implementation of this splay tree is largely based on the c code at:\n    ftp://ftp.cs.cmu.edu/usr/ftp/usr/sleator/splaying/top-down-splay.c\nThis version of splaying is a top-down splay operation.",null,null],[3,"IntoIter","","",null,null],[11,"new","","",2,{"inputs":[],"output":{"name":"splaymap"}}],[11,"into_iter","","Moves all values out of this map, transferring ownership to the given\niterator.",2,null],[11,"len","","",2,null],[11,"is_empty","","",2,null],[11,"clear","","Clears the tree in O(1) extra space (including the stack). This is\nnecessary to prevent stack exhaustion with extremely large trees.",2,null],[11,"contains_key","","Return true if the map contains a value for the specified key",2,null],[11,"get","","Return a reference to the value corresponding to the key",2,null],[11,"get_mut","","Return a mutable reference to the value corresponding to the key",2,null],[11,"insert","","Insert a key-value pair from the map. If the key already had a value\npresent in the map, that value is returned. Otherwise None is returned.",2,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",2,null],[11,"index","","",2,null],[11,"index_mut","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"splaymap"}}],[11,"from_iter","","",2,{"inputs":[{"name":"i"}],"output":{"name":"splaymap"}}],[11,"extend","","",2,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next_back","","",3,null],[11,"clone","","",2,null],[11,"drop","","",2,null]],"paths":[[3,"SplaySet"],[3,"IntoIter"],[3,"SplayMap"],[3,"IntoIter"]]};
initSearch(searchIndex);
